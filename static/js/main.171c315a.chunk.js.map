{"version":3,"sources":["child.js","App.js","serviceWorker.js","index.js"],"names":["Child","state","cross","crossClass","checkLine","_this","setState","_this2","this","react_default","a","createElement","type","className","onChange","props","text","value","onClick","deleteList","index","Component","App","formData","textList","listArray","updateForm","event","newData","target","originalState","copy","Object","assign","name","submitForm","preventDefault","slice","push","print","console","log","clear","array","splice","listInput","map","task","child","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAwEeA,oNApEfC,MAAQ,CACJC,OAAM,EAENC,WAAY,aAkBZC,UAAY,WAEsB,YAA1BC,EAAKJ,MAAME,WAEXE,EAAKC,SAAS,CACVJ,OAAO,EACPC,WAAY,UAIhBE,EAAKC,SAAS,CACVJ,OAAO,EACPC,WAAY,qFAgBf,IAAAI,EAAAC,KAEL,OACIC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,WAAWC,UAAU,QAAQC,SAAUN,KAAKJ,YACxDK,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,KAAKP,MAAME,YAGtBK,KAAKO,MAAMC,KACZP,EAAAC,EAAAC,cAAA,UAAQC,KAAK,QAAQK,MAAM,QAAQJ,UAAU,UAAUK,QAAS,kBAAMX,EAAKQ,MAAMI,WAAWZ,EAAKQ,MAAMK,SAAvG,WAGAX,EAAAC,EAAAC,cAAA,UAAQC,KAAK,QAAQK,MAAM,QAAQJ,UAAU,kBAAkBK,QAAS,kBAAMX,EAAKQ,MAAMI,WAAWZ,EAAKQ,MAAMK,SAA/G,0BA9DIC,cCgGLC,6MA7FbrB,MAAQ,CACNsB,SAAU,CACRC,SAAU,IAIZC,UAAU,MAIZC,WAAa,SAACC,GAEZ,IAAMC,EAAUD,EAAME,OAAOZ,MAEvBa,EAAgBzB,EAAKJ,MAAMsB,SAE3BQ,EAAOC,OAAOC,OAAO,GAAIH,GAI/BC,EAFYJ,EAAME,OAAOK,MAEbN,EAEZvB,EAAKC,SAAS,CACZiB,SAAUQ,OAGdI,WAAa,SAACR,GAEZA,EAAMS,iBAEN,IAAML,EAAO1B,EAAKJ,MAAMwB,UAAUY,MAAM,GAExCN,EAAKO,KAAKjC,EAAKJ,MAAMsB,UAErBlB,EAAKC,SAAS,CACZmB,UAAWM,EACXR,SAAU,CACRC,SAAS,SAKfe,MAAO,WACNC,QAAQC,IAAI,mBAEbC,MAAM,WACJrC,EAAKC,SAAS,CAAEmB,UAAW,QAG7BN,WAAa,SAACC,GACZoB,QAAQC,IAAI,mBAAoBrB,GAEhC,IAAIuB,EAAQtC,EAAKJ,MAAMwB,UAAUY,MAAM,GACvCG,QAAQC,IAAI,YAAaE,GACzBA,EAAMC,OAAOxB,EAAO,GACpBoB,QAAQC,IAAI,cAAeE,GAC3BtC,EAAKC,SAAS,CAAEmB,UAAWkB,6EAMpB,IAAApC,EAAAC,KAEDqC,EAAYrC,KAAKP,MAAMwB,UAAUqB,IAAI,SAACC,EAAO3B,GACjD,OAAOX,EAAAC,EAAAC,cAACqC,EAAD,CAAOhC,KAAM+B,EAAKvB,SAAUJ,MAAOA,EAAOD,WAAYZ,EAAKY,eAEpE,OACEV,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,QAAMsC,SAAUzC,KAAK2B,YAEnB1B,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,WAAd,sBACJJ,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOsB,KAAK,WAAWrB,UAAU,YAAYC,SAAUN,KAAKkB,WAAYT,MAAOT,KAAKP,MAAMsB,SAASC,WACzGf,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASK,MAAM,SAASJ,UAAU,YAOnDgC,EACDpC,EAAAC,EAAAC,cAAA,UAAQC,KAAK,QAAQK,MAAM,QAAQJ,UAAU,cAAcK,QAASV,KAAKkC,OAAzE,iBArFUrB,aCQE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.171c315a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Child extends Component {\nstate = {\n    cross:false,\n    // uncross:'false'\n    crossClass: \"uncross\"\n    }\n\n\n// checkLine = () =>{\n//     if (this.state.cross === 'false'){\n//         this.setState({cross: 'true'} )\n//         console.log('cross');\n        \n//     } else if (this.state.uncross === 'false'){\n//         this.setState({ uncross: 'true' })\n//         console.log('uncross');\n//     }\n// }\n\n\n\n\n    checkLine = () => {\n        //call up the cross\n        if (this.state.crossClass === \"uncross\"){\n            //give css for cross when cross false\n            this.setState({ \n                cross: false, \n                crossClass: \"cross\"\n            })\n        }else {\n            //when cross true take this css\n            this.setState({ \n                cross: true, \n                crossClass: \"uncross\"\n            })\n        }\n\n        \n    }\n   \n    // clearOneList = (number)=>{\n    //     // this.setState(this.listArray.remove(number));\n    //     // this.listArray\n    //     this.setState();\n\n    //     // array.remove(number);\n    //     console.log('Clear on list');\n        \n    // }\n    render() {\n\n        return (\n            <div>\n            <input type=\"checkbox\" className=\"check\" onChange={this.checkLine} ></input>\n            <div className={this.state.crossClass}>\n                \n                \n                {this.props.text}\n                <button type=\"reset\" value=\"Reset\" className=\"buttonX\" onClick={() => this.props.deleteList(this.props.index)}>✕</button >\n\n            </div >\n                <button type=\"reset\" value=\"Reset\" className=\"clearAllComplit\" onClick={() => this.props.deleteList(this.props.index)}>Clear All Comp</button>\n\n            </div>\n        );\n    }\n}\n\nexport default Child;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Child from './child';\n\nclass App extends Component {\n  //input \n  state = {\n    formData: {\n      textList: ''\n    },\n\n\n    listArray:[],\n  }\n\n\n  updateForm = (event) => {\n    //\n    const newData = event.target.value;\n    //\n    const originalState = this.state.formData\n    //\n    const copy = Object.assign({}, originalState);\n    //\n    const key = event.target.name\n    //\n    copy[key] = newData\n    //\n    this.setState({\n      formData: copy,\n    })\n  }\n  submitForm = (event) => {\n    //function use for no refresh page\n    event.preventDefault()\n    //copy the arry start with index 0 \n    const copy = this.state.listArray.slice(0)\n    //take the arry and push the nwe \n    copy.push(this.state.formData)\n    //copy the array and update change \n    this.setState({\n      listArray: copy,\n      formData: {\n        textList:'',\n      }\n    })\n\n  }\n  print =()=>{\n   console.log('√√');\n  }\n  clear=()=>{\n    this.setState({ listArray: [] });\n  }\n\n  deleteList = (index) => {\n    console.log('deleting item # ', index)\n\n    var array = this.state.listArray.slice(0);\n    console.log('arr val: ', array)\n    array.splice(index, 1);\n    console.log('arr val 2: ', array)\n    this.setState({ listArray: array}) \n\n    // this.setState({this.state.formData.listArray.splice(index, 1)}  ) \n    \n  }\n  \n  render() {\n    //take array for map and call up the child , style and list array \n    const listInput = this.state.listArray.map((task , index) => {\n      return <Child text={task.textList} index={index} deleteList={this.deleteList}/> \n    })\n    return (\n      <div >\n      \n        <form onSubmit={this.submitForm} >\n        \n          <label>\n            <h1 className='addYour'>add your ToDo List:\n        <input type=\"text\" name=\"textList\" className=\"inputText\" onChange={this.updateForm} value={this.state.formData.textList} />\n              <input type=\"submit\" value=\"Submit\" className=\"subm\"/>\n            </h1>\n            \n          </label>\n         \n         \n        </form>\n        {listInput}\n        <button type=\"reset\" value=\"Reset\" className=\"clearButton\" onClick={this.clear}>Clear</button>\n\n      \n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}